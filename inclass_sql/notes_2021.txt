NOTES
GIS Analysts jobs are declining due to automation
Web maps are much easier due to computing - need to know programming and/or technical side of GIS to have upper hand in job market

pgAdmin4
Connect to your database by clicking on it
Make sure your schema is selected in your database 
Click tools on top - select query tool
Queries usually start by typing “select” without the quotation marks
Typing “select 1,2” (remember the comma) into the query tool creates two unnamed columns with one row 
the value in the row of column 1 is 1, the value in the row of column 2 is 2



SQL
Declarative language
Not case specific
Can put statements on multiple lines
Semicolon lets psql know that the statement has completed/termination of that statement
If we have two values they need an operator between them
Comments start with --
Multiple comments/ block comments begin with /* and ends with */
:: → double colon is used to cast data to different data types - https://www.postgresql.org/docs/9.5/datatype.html 
For example 2::numeric → 2.0
Strings
Require single quote i.e. ‘this is a string’
Dates are treated as a string until you cast them or use a date function
‘1/26/2021’::date
CURRENT_DATE
SELECT * → this will select everything in the table, * astrix means everything

-- Return all fields
SELECT *
FROM spatial_ref_sys
WHERE srid = 26915

-- Return data from only the specified field
SELECT srid
FROM spatial_ref_sys
WHERE srid = 26915



SELECT 1*3 ,2, 3,4,5,6,7,
7,42
3
-- if you have a new line but forget the comma it will create an error

Creating a table
https://www.postgresql.org/docs/9.1/sql-createtable.html


CREATE TABLE address_book (
first_name text,
last_name varchar(255),
age integer,
savings numeric
);

INSERT INTO address_book (first_name, last_name, age, savings) VALUES ('David', 'Haynes', '40', 5000);

INSERT INTO address_book (last_name, first_name, age) VALUES ('Bobby','John', '30'), ('Bobby','tom', '30'), ('Bobby','Mike', '30');.

SELECT count(*)
-- count(*) or count(1)
FROM us_census_tracts_2014_2017
where state_name = 'Minnesota'




SELECT 1*3 ,2, 3,4,
7,42
-- if I have a new line but forget the comma this will create an error
,3  --If we have two values they need an operator between them
/*
This is a block of comments
*/
,55*63, 45/2.0, 33::bigint
-- turn this into a non integer
, 2.1,
45 / 2::numeric, 
-- :: cast
'hi I am a string',
'1/26/2020'::date, current_date;  --semicolon lets psql know that the statement has completed
-- dates are treated as strings until you cast or use a date function


SELECT * --srid, srid, srid, srid, SRID*2
-- * astrix means everything. Do not do this
-- case does not matter on the field name
FROM spatial_ref_sys
-- FROM ","
WHERE srid = 26915

--- Start Creating our own table

CREATE TABLE address_book (
first_name text,
last_name varchar(255),
age integer,
savings numeric
);

SELECT *
FROM address_book;


INSERT INTO address_book (first_name, last_name, age, savings) VALUES ('David', 'Haynes', '40', 5000);
INSERT INTO address_book (first_name, last_name, age, savings) VALUES ('Tamanika', 'Haynes', '99', 50);
INSERT INTO address_book (first_name, age, savings) VALUES ('Tom', '36', 565);
INSERT INTO address_book (last_name, first_name) VALUES ('Bobby','Ricky');
INSERT INTO address_book (last_name, first_name, age) VALUES ('Bobby','Tricky', 30.5);
-- we added a numeric/float instead of integer and it was successful
INSERT INTO address_book (last_name, first_name, age) VALUES ('Bobby','Tricky', '30');
-- we were able to supply a string of a number and create an integer

INSERT INTO address_book (last_name, first_name, age) VALUES ('Bobby','John', '30'), ('Bobby','tom', '30'), ('Bobby','Mike', '30');


INSERT INTO address_book  VALUES ('David', 'Haynes II', '40', 5000);
-- this worked. The Values need to be in the appropriate order of the columns
INSERT INTO address_book  VALUES ('David', 'Haynes II', '40');
-- this adds values until it runs out.


UPDATE address_book
SET age = 99
WHERE last_name = 'Haynes' AND first_name = 'David';

DELETE FROM address_book
WHERE last_name = 'Haynes' AND first_name = 'Tamanika';



SELECT *
FROM address_book 
WHERE age IS NOT NULL


SELECT last_name, savings
FROM address_book 
-- older than 35 younger than 45
WHERE age > 35 AND age < 45

SELECT state_code, state_name, county_name, 
sum(total) as total_pop --as is the alias lets you rename a column
,sum(male_under_5_years) as baby_boys
-- total, male_under_5_years
-- count(*) or count(1)
FROM us_census_tracts_2014_2017
-- where state_name = 'Minnesota'
GROUP BY state_code, state_name, county_name



SELECT male_under_5_years +  female_under_5_years as all_the_babies
FROM us_census_tracts_2014_2017

SELECT male_under_5_years / female_under_5_years::numeric as all_the_babies
FROM us_census_tracts_2014_2017
WHERE female_under_5_years > 0


SELECT state_name, county_name, avg(male_under_5_years / female_under_5_years::numeric) as state_ratio_babies
FROM us_census_tracts_2014_2017
WHERE female_under_5_years > 0
GROUP BY state_name, county_name
ORDER BY state_name DESC, county_name DESC
-- order by clause has asc/ desc


The code below:
Sum the total column in the us_census_tracts_2014_2017 table by state_name and county_name under an alias called “total_pop”
Grouped by
must include all column names from SELECT that are not in a function - for the code below, include state_name and county_name but not total as that is in a sum function
Order by state_name in alphabetical order ascending A-Z
Makes the output sorted by alphabetical order

SELECT sum(total) as total_pop, state_name, county_name
FROM us_census_tracts_2014_2017
GROUP BY state_name, county_name -- add together total column by state_name
ORDER BY state_name ASC

